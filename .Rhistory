module_stats <- clicks_module_df %>%
filter(cluster %in% c(1,2,3,4,5,6)) %>% # default: 4,5,6
group_by(cluster, code_module.x) %>%
summarise(module_access_count = n()) %>%
mutate(module_access_percent = round(module_access_count / sum(module_access_count) * 100, 1)) %>%
arrange(desc(module_access_percent))
module_stats <- clicks_module_df %>%
filter(engagement_level %in% c(1,2,3,4,5,6)) %>% # default: 4,5,6
group_by(engagement_level, code_module.x) %>%
summarise(module_access_count = n()) %>%
mutate(module_access_percent = round(module_access_count / sum(module_access_count) * 100, 1)) %>%
arrange(desc(module_access_percent))
module_stats
hchart(module_stats, "column", hcaes(x = code_module.x, y = module_access_percent, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Modules Accessed by Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Module")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
clicks_df
# Merging with student info data frame
clicks_student_df <- merge.data.table(student, clicks_df, by = "id_student")
clicks_student_df
gender_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, gender) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
gender_stats
hchart(gender_stats, "column", hcaes(x = gender, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Gender Representation in Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Gender")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
age_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, age_band) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
age_stats
hchart(age_stats, "column", hcaes(x = age_band, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Student Age Band Representation in Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Age Band")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
disability_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, disability) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
disability_stats$disability <- as.character(disability_stats$disability)
disability_stats
hchart(disability_stats, "column", hcaes(x = disability, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Student with/without a Disability Representation in Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Disability")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
final_results_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, final_result) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
final_results_stats
hchart(final_results_stats, "column", hcaes(x = final_result,
y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Student Final Academic Outcome in each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Final Result")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
prev_attempts_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, num_of_prev_attempts) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
prev_attempts_stats$num_of_prev_attempts <- as.character(prev_attempts_stats$num_of_prev_attempts)
prev_attempts_stats
hchart(prev_attempts_stats, "column", hcaes(x = num_of_prev_attempts,
y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Number of Previous Attempts in Course according to each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Number of Previous Attempts")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
region_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:2)) %>% # default: all
group_by(engagement_level, region) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
region_stats
hchart(region_stats, "column", hcaes(x = region, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Engagement Level Representation based on Student's Region of Stay")
) %>%
hc_xAxis(title = list(text = "Regions")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
module_stats2 <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, code_module) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
module_stats2
hchart(module_stats2, "column", hcaes(x = code_module, y = module_access_percent, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Modules Accessed by Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Module")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
hchart(module_stats2, "column", hcaes(x = code_module, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Modules Accessed by Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Module")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
# Merging with student info data frame
clicks_student_df <- merge.data.table(student, clicks_df, by = "id_student")
clicks_student_df
module_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, code_module) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
module_stats2
hchart(module_stats, "column", hcaes(x = code_module, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Modules Accessed by Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Module")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
hchart(gender_stats, "column", hcaes(x = gender, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Gender Representation in Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Gender")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
hchart(age_stats, "column", hcaes(x = age_band, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Student Age Band Representation in Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Age Band")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
hchart(disability_stats, "column", hcaes(x = disability, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Student with/without a Disability Representation in Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Disability")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
hchart(final_results_stats, "column", hcaes(x = final_result,
y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Student Final Academic Outcome in each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Final Result")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
hchart(prev_attempts_stats, "column", hcaes(x = num_of_prev_attempts,
y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Number of Previous Attempts in Course according to each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Number of Previous Attempts")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
hchart(region_stats, "column", hcaes(x = region, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Engagement Level Representation based on Student's Region of Stay")
) %>%
hc_xAxis(title = list(text = "Regions")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
shiny::runApp()
runApp()
shiny::runApp()
shiny::input()
shiny::modalButton()
modalButton(
"myModal",
label = "click me",
icon = icon("info-circle"),
header = tags$h3("Help!"),
content = tags$html(
tags$p("I need somebody"),
tags$h3("Help!"),
tags$p("Not just anybody")
)
-
h
hbgjhkl;''
runApp()
shiny::runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
load(file='https://github.com/jakubkuzilek/oulad/blob/master/data/assessment.rda')
load(file=url('https://github.com/jakubkuzilek/oulad/blob/master/data/assessment.rda'))
load(url('https://github.com/jakubkuzilek/oulad/blob/master/data/assessment.rda'))
student_vle
read_csv("oulad/studentVle.csv")
runApp()
read_csv("oulad/vle.csv")
vle
read_csv("oulad/studentInfo.csv")
student
runApp()
read_csv("oulad/studentInfo.csv")
read_csv("oulad/studentInfo.csv", show_col_types = FALSE)
si <- read_csv("oulad/studentInfo.csv", show_col_types = FALSE)
si
si <- read_csv("oulad/studentInfo.csv", show_col_types = FALSE)
si$num_of_prev_attempts <- as.integer(si$num_of_prev_attempts)
si
runApp()
# Merging with student info data frame
si <- read_csv("oulad/studentInfo.csv", show_col_types = FALSE)
si$num_of_prev_attempts <- as.integer(si$num_of_prev_attempts)
clicks_student_df <- merge.data.table(si, clicks_df, by = "id_student") # si was student
si
as.data.frame(si)
# Merging with student info data frame
si <- read_csv("oulad/studentInfo.csv", show_col_types = FALSE)
si$num_of_prev_attempts <- as.integer(si$num_of_prev_attempts)
si <- as.data.frame(si)
clicks_student_df <- merge.data.table(si, clicks_df, by = "id_student") # si was student
clicks_student_df
runApp()
shiny::runApp()
options(rsconnect.max.bundle.size=3145728000)
getOption('rsconnect.max.bundle.size')
library(rsconnect)
runApp()
runApp('files')
runApp('files')
knitr::opts_chunk$set(echo = TRUE)
# Open University Learning Analytics Dataset
library(oulad)
# Data Analyis and Visualisation
library(tidyverse)
# Statistical Summary
library(tigerstats)
# Gaussian mixture model (GMM)
library(mclust)
# Interactive ggplots
library(plotly)
# Load student VLE data
# svle_df <- student_vle
# svle_df %>% head()
student_vle %>% head()
# Load student VLE data
svle_df <- student_vle
clicks_df <- student_vle %>%
# filter(date >=-25 & date <= 269 &
# code_presentation %in% 2013J) %>%  Filter for the dashboard (days) and semester
group_by(id_student) %>%
summarise(sum_click = sum(sum_click))
clicks_df %>% head()
# Selecting clicks for modelling
gmm_df <- select(clicks_df, sum_click)
gmm_df %>% head()
# Add clusters and uncertainty values to original dataset
clicks_df$engagement_level <- gmm_model$classification
# Fit a GMM model
set.seed(1837)
start_time <- Sys.time()
gmm_model <- Mclust(gmm_df, G=6)
end_time <- Sys.time()
# Execution Time
end_time - start_time
# Add clusters and uncertainty values to original dataset
clicks_df$engagement_level <- gmm_model$classification
clicks_df$uncertainty <- gmm_model$uncertainty
clicks_df %>% head()
# Probability of a student belonging to a engagement level
engagement_level_probabilities <- gmm_model$z
colnames(engagement_level_probabilities) <- paste0('engagement_level', 1:gmm_model$G)
options(scipen=999)
# Create probabilities data frame
engagement_level_probabilities <- engagement_level_probabilities %>%
round(2) %>%
as.data.frame()
engagement_level_probabilities %>% head()
# Add cluster belonging of student
engagement_level_probabilities$engagement_level <- clicks_df$engagement_level
engagement_level_probabilities$uncertainty <- round(gmm_model$uncertainty*100,2)
engagement_level_probabilities$sum_click <- clicks_df$sum_click
engagement_level_probabilities$id_student <- clicks_df$id_student
engagement_level_probabilities %>% head()
engagement_level_avg_df <- as.data.frame(round(gmm_model$parameters$mean))
colnames(engagement_level_avg_df) <- "average_clicks"
engagement_level_avg_df
# Rename rownames to engagement_level
engagement_level_avg_df <- cbind(engagement_level = rownames(engagement_level_avg_df), engagement_level_avg_df)
# Remove rownames
rownames(engagement_level_avg_df) <- NULL
engagement_level_avg_df
# Obtain number of observations in each cluster.
engagement_level_count_df <- clicks_df %>%
group_by(engagement_level) %>%
summarise(Number_of_students = n()) #%>%
# arrange(Number_of_students)
engagement_level_count_df
engagement_level_stats <- merge(engagement_level_avg_df, engagement_level_count_df) %>% arrange(average_clicks)
engagement_level_stats
vle_df <- vle
#vle_df <- vle
# vle_df
vle %>% head()
# For fast data operations
library(data.table)
# Merging the dataframes to link students with activities
# Long execution code
svle_vle_df <- data.table::merge.data.table(student_vle, vle, by = "id_site")
svle_vle_df
# Long execution code
# Number of Times student accessed an activity
activity_df <- svle_vle_df %>%
group_by(id_student,activity_type) %>%
summarise(activity_access_count = n()) %>%
as.data.frame()
activity_df
# Merging data frames
clicks_activity_df <- merge.data.table(activity_df, clicks_df, by = "id_student")
clicks_activity_df
activity_stats <- clicks_activity_df %>%
filter(engagement_level %in% 1) %>% # dashboard filter: single number select
group_by(engagement_level, activity_type) %>%
summarise(activity_access_count = n()) %>%
mutate(activity_access_percent = round(activity_access_count / sum(activity_access_count) * 100, 2)) %>%
arrange(desc(activity_access_percent))
activity_stats
clicks_student_df <- merge.data.table(student, clicks_df, by = "id_student") # si was student
clicks_student_df
module_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, code_module) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
module_stats2
module_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, code_module) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
module_stats
gender_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, gender) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
gender_stats
age_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, age_band) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
age_stats
disability_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, disability) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
disability_stats$disability <- as.character(disability_stats$disability)
disability_stats
final_results_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, final_result) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
final_results_stats
prev_attempts_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, num_of_prev_attempts) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
prev_attempts_stats$num_of_prev_attempts <- as.character(prev_attempts_stats$num_of_prev_attempts)
prev_attempts_stats
region_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:2)) %>% # default: all
group_by(engagement_level, region) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
region_stats
# Load student VLE data
set.seed(1234)
svle_df <- sample(student_vle,1000)
svle_df
svle_df <- sample(student_vle,10000)
# Load student VLE data
set.seed(1234)
svle_df <- sample(student_vle,10000)
svle_df <- student_vle
# svle_df %>% head()
student_vle %>% head()
svle_df <- student_vle
svle_df <- sample(student_vle,10000)
svle_df
# Merging the dataframes to link students with activities
# Long execution code
svle_vle_df <- data.table::merge.data.table(svle_df, vle, by = "id_site")
runApp()
student_vle
svle_df <- sample(student_vle,100000)
svle_df <- sample(student_vle,100000)
# Merging the dataframes to link students with activities
# Long execution code
# Replace svle_df with student_vle
svle_vle_df <- data.table::merge.data.table(svle_df, vle, by = "id_site")
runApp()
svle_df <- sample(student_vle,1000000)
# Merging the dataframes to link students with activities
# Long execution code
# Replace svle_df with student_vle
svle_vle_df <- data.table::merge.data.table(svle_df, vle, by = "id_site")
svle_vle_df
sample(read_csv("oulad/studentVle.csv"), 100000)
read_csv("oulad/studentVle.csv")
sample(read_csv("oulad/studentVle.csv"), 100000)
runApp()
