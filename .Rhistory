bp_clicks_outlier <- data_to_boxplot(data = clicks_df,
variable = sum_click,
add_outliers = TRUE,
fillColor = "#B71C1C",
color = "black")
highchart() %>%
hc_xAxis(type = "category",
title = list(text = "Clicks")) %>%
hc_yAxis(title = list(text = "Sum of Clicks")) %>%
hc_title(
text = paste0("Statistical Summary of Clickstream Data with Outliers")
) %>%
hc_add_series_list(bp_clicks_outlier) %>%
hc_legend(FALSE)
hchart(clicks_df$sum_click, color = "#B71C1C", name = "Clicks") %>%
hc_title(
text = paste0("Distribution of Clickstream Data")
) %>%
hc_xAxis(title = list(text = "Number of Clicks")) %>%
hc_yAxis(title = list(text = "Number of Students"))
print(min(cluster_probabilitics$sum_click))
print(min(engagement_level_probabilities$sum_click))
print(max(engagement_level_probabilities$sum_click))
print(mean(engagement_level_probabilities$sum_click))
print(mean(engagement_level_probabilities$uncertainty))
print(min(engagement_level_probabilities$sum_click))
print(max(engagement_level_probabilities$sum_click))
print(mean(engagement_level_probabilities$sum_click))
print(round(mean(engagement_level_probabilities$uncertainty),2))
print(min(engagement_level_probabilities$sum_click))
print(max(engagement_level_probabilities$sum_click))
print(round(mean(engagement_level_probabilities$sum_click),2))
print(round(mean(engagement_level_probabilities$uncertainty),2))
DT::datatable(engagement_level_probabilities,
rownames = T,
filter = "top",
options = list(pageLength = 2, scrollX = TRUE, info = FALSE))
engagement_level_probabilities %>% round(4)
# Probability of a student belonging to a engagement level
engagement_level_probabilities <- gmm_model$z
colnames(engagement_level_probabilities) <- paste0('engagement_level', 1:gmm_model$G)
options(scipen=999)
# Create probabilities data frame
engagement_level_probabilities <- engagement_level_probabilities %>%
round(2) %>%
as.data.frame()
engagement_level_probabilities %>% head()
# Add cluster belonging of student
engagement_level_probabilities$engagement_level <- clicks_df$engagement_level
engagement_level_probabilities$uncertainty <- round(gmm_model$uncertainty*100,2)
engagement_level_probabilities$sum_click <- clicks_df$sum_click
engagement_level_probabilities$id_student <- clicks_df$id_student
engagement_level_probabilities %>% head()
engagement_level_avg_df <- as.data.frame(round(gmm_model$parameters$mean))
colnames(engagement_level_avg_df) <- "average_clicks"
engagement_level_avg_df
# Rename rownames to engagement_level
engagement_level_avg_df <- cbind(engagement_level = rownames(engagement_level_avg_df), engagement_level_avg_df)
# Remove rownames
rownames(engagement_level_avg_df) <- NULL
engagement_level_avg_df
# Obtain number of observations in each cluster.
engagement_level_count_df <- clicks_df %>%
group_by(engagement_level) %>%
summarise(Number_of_students = n()) #%>%
# arrange(Number_of_students)
engagement_level_count_df
engagement_level_stats <- merge(engagement_level_avg_df, engagement_level_count_df) %>% arrange(average_clicks)
engagement_level_stats
hchart(engagement_level_stats, "column", hcaes(x = engagement_level, y = average_clicks),
dataLabels = list(enabled = TRUE),
name = "Average No. of Clicks") %>%
hc_title(
text = paste0("Average Number of Clicks for Each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Engagement Level")) %>%
hc_yAxis(title = list(text = "Average Number of Clicks"))
hchart(engagement_level_stats, "column", hcaes(x = engagement_level, y = Number_of_students),
dataLabels = list(enabled = TRUE),
name = "No of Students") %>%
hc_title(
text = paste0("Number of Students in Each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Engagement Level")) %>%
hc_yAxis(title = list(text = "Number of Students")) %>%
hc_exporting(
enabled = TRUE)
hchart(clicks_df$uncertainty, color = "#B71C1C", name = "Uncertainty") %>%
hc_title(
text = paste0("Distribution of Engagement Level Assignment Uncertainty")
) %>%
hc_xAxis(title = list(text = "Uncertainty")) %>%
hc_yAxis(title = list(text = "Number of Students"))
hchart(engagement_level_probabilities$uncertainty, color = "#B71C1C", name = "Uncertainty") %>%
hc_title(
text = paste0("Distribution of Engagement Level Assignment Uncertainty")
) %>%
hc_xAxis(title = list(text = "Uncertainty")) %>%
hc_yAxis(title = list(text = "Number of Students"))
hchart(engagement_level_probabilities$uncertainty, color = "#B71C1C", name = "Uncertainty") %>%
hc_title(
text = paste0("Distribution of Engagement Level Assignment Uncertainty")
) %>%
hc_xAxis(title = list(text = "Uncertainty"),
labels = list(format = "{value}%")) %>%
hc_yAxis(title = list(text = "Number of Students"))
# Boxplot of clicks
bp_clicks <- data_to_boxplot(data = clicks_df,
variable = sum_click,
add_outliers = FALSE,
fillColor = "#B71C1C",
color = "black")
highchart() %>%
hc_xAxis(type = "category",
title = list(text = "Clicks")) %>%
hc_yAxis(title = list(text = "Number of Clicks")) %>%
hc_title(
text = paste0("Statistical Summary of Clickstream Data without Outliers")
) %>%
hc_add_series_list(bp_clicks) %>%
hc_legend(FALSE)
# Boxplot of clicks
bp_clicks_outlier <- data_to_boxplot(data = clicks_df,
variable = sum_click,
add_outliers = TRUE,
fillColor = "#B71C1C",
color = "black")
highchart() %>%
hc_xAxis(type = "category",
title = list(text = "Clicks")) %>%
hc_yAxis(title = list(text = "Sum of Clicks")) %>%
hc_title(
text = paste0("Statistical Summary of Clickstream Data with Outliers")
) %>%
hc_add_series_list(bp_clicks_outlier) %>%
hc_legend(FALSE)
hchart(clicks_df$sum_click, color = "#B71C1C", name = "Clicks") %>%
hc_title(
text = paste0("Distribution of Clickstream Data")
) %>%
hc_xAxis(title = list(text = "Number of Clicks")) %>%
hc_yAxis(title = list(text = "Number of Students"))
print(min(engagement_level_probabilities$sum_click))
print(max(engagement_level_probabilities$sum_click))
print(round(mean(engagement_level_probabilities$sum_click),2))
print(round(mean(engagement_level_probabilities$uncertainty),2))
DT::datatable(engagement_level_probabilities,
rownames = T,
filter = "top",
options = list(pageLength = 2, scrollX = TRUE, info = FALSE))
# vle_df <- vle
# vle_df
vle %>% head()
# For fast data operations
library(data.table)
# Merging the dataframes to link students with activities
svle_vle_df <- data.table::merge.data.table(student_vle, vle, by = "id_site")
svle_vle_df
# vle_df <- vle
# vle_df
vle %>% head()
# Merging the dataframes to link students with activities
svle_vle_df <- data.table::merge.data.table(student_vle, vle, by = "id_site")
svle_vle_df
# Number of Times student accessed an activity
activity_df <- svle_vle_df %>%
group_by(id_student,activity_type) %>%
summarise(activity_access_count = n()) %>%
as.data.frame()
activity_df
# Merging data frames
clicks_activity_df <- merge.data.table(activity_df, clicks_df, by = "id_student")
clicks_activity_df
activity_stats <- clicks_activity_df %>%
filter(cluster %in% 1) %>%
group_by(cluster, activity_type) %>%
summarise(activity_access_count = n()) %>%
mutate(activity_access_percent = round(activity_access_count / sum(activity_access_count) * 100, 2)) %>%
arrange(desc(activity_access_percent))
activity_stats <- clicks_activity_df %>%
filter(engagement_level %in% 1) %>%
group_by(engagement_level, activity_type) %>%
summarise(activity_access_count = n()) %>%
mutate(activity_access_percent = round(activity_access_count / sum(activity_access_count) * 100, 2)) %>%
arrange(desc(activity_access_percent))
activity_stats
hchart(activity_stats, "column", hcaes(x = activity_type, y = activity_access_percent),
dataLabels = list(enabled = TRUE, format = "{y}%"),
name = "% of Students") %>%
hc_title(
text = paste0("Percentage of Students that Access each VLE Activity in Engagement Level ", 1)
) %>%
hc_xAxis(title = list(text = "VLE Activity")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_exporting(
enabled = TRUE)
# Comparison between engagement levels
# Maximum number of comparison should be limited to 3 in dashboard
activity_stats <- clicks_activity_df %>%
filter(engagement_level %in% c(1,2, 3)) %>%
group_by(cluster, activity_type) %>%
summarise(activity_access_count = n()) %>%
mutate(activity_access_percent = round(activity_access_count / sum(activity_access_count) * 100, 1)) %>%
arrange(desc(activity_access_percent))
# Comparison between engagement levels
# Maximum number of comparison should be limited to 3 in dashboard
activity_stats <- clicks_activity_df %>%
filter(engagement_level %in% c(1,2, 3)) %>%
group_by(engagement_level, activity_type) %>%
summarise(activity_access_count = n()) %>%
mutate(activity_access_percent = round(activity_access_count / sum(activity_access_count) * 100, 1)) %>%
arrange(desc(activity_access_percent))
hchart(activity_stats, "column", hcaes(x = activity_type, y = activity_access_percent, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}"),
stacking = "normal") %>%
hc_title(
text = paste0("Percentage of Students that Access each VLE Activity in Engagement Level")
) %>%
hc_xAxis(title = list(text = "VLE Activity")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
# Module Analysis
# Number of Times student accessed a module on the VLE
module_df <- svle_vle_df %>%
group_by(id_student,code_module.x) %>%
summarise(module_acess_count = n()) %>%
as.data.frame()
module_df
clicks_module_df <- merge.data.table(module_df, clicks_df, by = "id_student")
clicks_module_df
module_stats <- clicks_module_df %>%
filter(cluster %in% c(1,2,3,4,5,6)) %>% # default: 4,5,6
group_by(cluster, code_module.x) %>%
summarise(module_access_count = n()) %>%
mutate(module_access_percent = round(module_access_count / sum(module_access_count) * 100, 1)) %>%
arrange(desc(module_access_percent))
module_stats <- clicks_module_df %>%
filter(engagement_level %in% c(1,2,3,4,5,6)) %>% # default: 4,5,6
group_by(engagement_level, code_module.x) %>%
summarise(module_access_count = n()) %>%
mutate(module_access_percent = round(module_access_count / sum(module_access_count) * 100, 1)) %>%
arrange(desc(module_access_percent))
module_stats
hchart(module_stats, "column", hcaes(x = code_module.x, y = module_access_percent, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Modules Accessed by Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Module")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
clicks_df
# Merging with student info data frame
clicks_student_df <- merge.data.table(student, clicks_df, by = "id_student")
clicks_student_df
gender_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, gender) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
gender_stats
hchart(gender_stats, "column", hcaes(x = gender, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Gender Representation in Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Gender")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
age_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, age_band) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
age_stats
hchart(age_stats, "column", hcaes(x = age_band, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Student Age Band Representation in Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Age Band")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
disability_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, disability) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
disability_stats$disability <- as.character(disability_stats$disability)
disability_stats
hchart(disability_stats, "column", hcaes(x = disability, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Student with/without a Disability Representation in Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Disability")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
final_results_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, final_result) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
final_results_stats
hchart(final_results_stats, "column", hcaes(x = final_result,
y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Student Final Academic Outcome in each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Final Result")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
prev_attempts_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, num_of_prev_attempts) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
prev_attempts_stats$num_of_prev_attempts <- as.character(prev_attempts_stats$num_of_prev_attempts)
prev_attempts_stats
hchart(prev_attempts_stats, "column", hcaes(x = num_of_prev_attempts,
y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Number of Previous Attempts in Course according to each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Number of Previous Attempts")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
region_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:2)) %>% # default: all
group_by(engagement_level, region) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
region_stats
hchart(region_stats, "column", hcaes(x = region, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Engagement Level Representation based on Student's Region of Stay")
) %>%
hc_xAxis(title = list(text = "Regions")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
module_stats2 <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, code_module) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
module_stats2
hchart(module_stats2, "column", hcaes(x = code_module, y = module_access_percent, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Modules Accessed by Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Module")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
hchart(module_stats2, "column", hcaes(x = code_module, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Modules Accessed by Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Module")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
# Merging with student info data frame
clicks_student_df <- merge.data.table(student, clicks_df, by = "id_student")
clicks_student_df
module_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, code_module) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
module_stats2
hchart(module_stats, "column", hcaes(x = code_module, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Modules Accessed by Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Module")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
hchart(gender_stats, "column", hcaes(x = gender, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Gender Representation in Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Gender")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
hchart(age_stats, "column", hcaes(x = age_band, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Student Age Band Representation in Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Age Band")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
hchart(disability_stats, "column", hcaes(x = disability, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Student with/without a Disability Representation in Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Disability")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
hchart(final_results_stats, "column", hcaes(x = final_result,
y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Student Final Academic Outcome in each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Final Result")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
hchart(prev_attempts_stats, "column", hcaes(x = num_of_prev_attempts,
y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Number of Previous Attempts in Course according to each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Number of Previous Attempts")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
hchart(region_stats, "column", hcaes(x = region, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Engagement Level Representation based on Student's Region of Stay")
) %>%
hc_xAxis(title = list(text = "Regions")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
shiny::runApp()
runApp()
shiny::runApp()
shiny::input()
shiny::modalButton()
modalButton(
"myModal",
label = "click me",
icon = icon("info-circle"),
header = tags$h3("Help!"),
content = tags$html(
tags$p("I need somebody"),
tags$h3("Help!"),
tags$p("Not just anybody")
)
-
h
hbgjhkl;''
runApp()
shiny::runApp()
