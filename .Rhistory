#set.seed(1637)
J_2013 = subset(svle_df,code_presentation == "2013J")
J_2013 = popsamp(25000,J_2013)
#set.seed(1737)
B_2014 = subset(svle_df,code_presentation == "2014B")
B_2014 = popsamp(25000,B_2014)
#set.seed(1837)
J_2014 = subset(svle_df,code_presentation == "2014J")
J_2014 = popsamp(25000,J_2014)
svle_df3 <- rbind(B_2013, J_2013, B_2014, J_2014)
svle_df3
favstats(svle_df$sum_click)
favstats(svle_df2$sum_click)
favstats(svle_df3$sum_click)
favstats(svle_df3$sum_click)
#set.seed(1537)
B_2013 = subset(svle_df,code_presentation == "2013B")
B_2013 = popsamp(25000,B_2013)
#set.seed(1637)
J_2013 = subset(svle_df,code_presentation == "2013J")
J_2013 = popsamp(25000,J_2013)
#set.seed(1737)
B_2014 = subset(svle_df,code_presentation == "2014B")
B_2014 = popsamp(25000,B_2014)
#set.seed(1837)
J_2014 = subset(svle_df,code_presentation == "2014J")
#set.seed(1837)
J_2014 = subset(svle_df,code_presentation == "2014J")
J_2014 = popsamp(25000,J_2014)
#set.seed(1837)
J_2014 = subset(svle_df,code_presentation == "2014J")
J_2014 = popsamp(25000,J_2014)
svle_df3 <- rbind(B_2013, J_2013, B_2014, J_2014)
favstats(svle_df3$sum_click)
favstats(svle_df3$sum_click)
#set.seed(1537)
B_2013 = subset(svle_df,code_presentation == "2013B")
B_2013 = popsamp(25000,B_2013)
#set.seed(1637)
J_2013 = subset(svle_df,code_presentation == "2013J")
#set.seed(1737)
B_2014 = subset(svle_df,code_presentation == "2014B")
B_2014 = popsamp(25000,B_2014)
#set.seed(1837)
J_2014 = subset(svle_df,code_presentation == "2014J")
#set.seed(1837)
J_2014 = subset(svle_df,code_presentation == "2014J")
J_2014 = popsamp(25000,J_2014)
J_2014 = popsamp(25000,J_2014)
svle_df3 <- rbind(B_2013, J_2013, B_2014, J_2014)
svle_df3
# Reading data
library(tidyverse)
svle_df <- read_csv("oulad/studentVle.csv") %>% as.data.frame()
#set.seed(1234)
# Sampling 100 000
svle_df2 <- sample_n(svle_df, 100000)
# Data Sampling Per Year
library(tigerstats)
#set.seed(1537)
B_2013 = subset(svle_df,code_presentation == "2013B")
B_2013 = popsamp(25000,B_2013)
#set.seed(1637)
J_2013 = subset(svle_df,code_presentation == "2013J")
J_2013 = popsamp(25000,J_2013)
#set.seed(1737)
B_2014 = subset(svle_df,code_presentation == "2014B")
B_2014 = popsamp(25000,B_2014)
#set.seed(1837)
J_2014 = subset(svle_df,code_presentation == "2014J")
J_2014 = popsamp(25000,J_2014)
svle_df3 <- rbind(B_2013, J_2013, B_2014, J_2014)
svle_df3
favstats(svle_df3$sum_click)
favstats(svle_df2$sum_click)
vle_df <- read_csv("oulad/vle.csv") %>% as.data.frame()
svle_vle_df <- data.table::merge.data.table(svle_df3, vle_df, by = "id_site")
svle_vle_df
write.csv(svle_df3,'oulad2/studentVle.csv')
read_csv("oulad2/studentVle.csv")
write.csv(svle_df3,'oulad2/studentVle.csv', row.names = FALSE)
read_csv("oulad2/studentVle.csv")
??oulad
?oulad
??oulad
??library(oulad)
??"oulad"
help.search(oulad)
help.search("oulad")
# Open University Learning Analytics Dataset
library(oulad)
# Data Analyis and Visualisation
library(tidyverse)
# Statistical Summary
library(tigerstats)
# Gaussian mixture model (GMM)
library(mclust)
# Interactive Data Visualization
library(highcharter)
# Fast Data operations: merging and manipulation
library(data.table)
# To get information the OULAD Data set
help.search("oulad")
# Load student VLE data from oulad library
set.seed(1234)
svle_df <- student_vle
# svle_df %>% head()
student_vle %>% head()
# To get information the OULAD Data set
help.search("oulad")
# Load student VLE data from oulad library
set.seed(1234)
svle_df <- student_vle
# svle_df %>% head()
student_vle %>% head()
# Percentage of missing values
sum(is.na(student_vle$sum_click))/length(student_vle$sum_click) * 100
# Statistical Summary of Date indicator
favstats(student_vle$date)
# Statistical Summary of Sum of Clicks
favstats(student_vle$sum_click)
clicks_df <- student_vle %>%
# filter(date >=-25 & date <= 269 &
# code_presentation %in% 2013J) %>%  Filter for the dashboard (days) and semester
group_by(id_student) %>%
summarise(sum_click = sum(sum_click))
clicks_df %>% head()
# Statistical Summary of Sum of Clicks for the filtered Period
favstats(clicks_df$sum_click)
# Selecting clicks for modelling
gmm_df <- select(clicks_df, sum_click)
gmm_df %>% head()
# Selecting clicks for modelling
gmm_df <- select(clicks_df, sum_click)
gmm_df %>% head()
# Fit a GMM model
set.seed(1837)
start_time <- Sys.time()
gmm_model <- Mclust(gmm_df, G=6)
end_time <- Sys.time()
# Execution Time
end_time - start_time
# Model Objects
print(gmm_model)
# Summary table
summary(gmm_model)
# Cluster Means/Engagement Levels
gmm_model$parameters$mean
# Add clusters and uncertainty values to original dataset
clicks_df$engagement_level <- gmm_model$classification
clicks_df$uncertainty <- gmm_model$uncertainty
clicks_df %>% head()
# Exclude scientific outputs
options(scipen=999)
# View data set
# View(clicks_df)
# Probability of a student belonging to a engagement level
engagement_level_probabilities <- gmm_model$z
colnames(engagement_level_probabilities) <- paste0('engagement_level', 1:gmm_model$G)
options(scipen=999)
# Create probabilities data frame
engagement_level_probabilities <- engagement_level_probabilities %>%
round(2) %>%
as.data.frame()
engagement_level_probabilities %>% head()
# Add cluster belonging of student
engagement_level_probabilities$engagement_level <- clicks_df$engagement_level
engagement_level_probabilities$uncertainty <- round(gmm_model$uncertainty*100,2)
engagement_level_probabilities$sum_click <- clicks_df$sum_click
engagement_level_probabilities$id_student <- clicks_df$id_student
engagement_level_probabilities %>% head()
engagement_level_avg_df <- as.data.frame(round(gmm_model$parameters$mean))
colnames(engagement_level_avg_df) <- "average_clicks"
engagement_level_avg_df
# Rename rownames to engagement_level
engagement_level_avg_df <- cbind(engagement_level = rownames(engagement_level_avg_df), engagement_level_avg_df)
# Remove rownames
rownames(engagement_level_avg_df) <- NULL
engagement_level_avg_df
# Obtain number of observations in each cluster.
engagement_level_count_df <- clicks_df %>%
group_by(engagement_level) %>%
summarise(Number_of_students = n()) #%>%
# arrange(Number_of_students)
engagement_level_count_df
engagement_level_stats <- merge(engagement_level_avg_df, engagement_level_count_df) %>% arrange(average_clicks)
engagement_level_stats
# Data Visualization
library(highcharter)
hchart(engagement_level_stats, "column", hcaes(x = engagement_level, y = average_clicks),
dataLabels = list(enabled = TRUE),
name = "Average No. of Clicks") %>%
hc_title(
text = paste0("Average Number of Clicks for Each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Engagement Level")) %>%
hc_yAxis(title = list(text = "Average Number of Clicks"))
hchart(engagement_level_stats, "column", hcaes(x = engagement_level, y = Number_of_students),
dataLabels = list(enabled = TRUE),
name = "No of Students") %>%
hc_title(
text = paste0("Number of Students in Each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Engagement Level")) %>%
hc_yAxis(title = list(text = "Number of Students")) %>%
hc_exporting(
enabled = TRUE)
hchart(engagement_level_probabilities$uncertainty, color = "#B71C1C", name = "Uncertainty") %>%
hc_title(
text = paste0("Distribution of Engagement Level Assignment Uncertainty")
) %>%
hc_xAxis(title = list(text = "Uncertainty"),
labels = list(format = "{value}%")) %>%
hc_yAxis(title = list(text = "Number of Students"))
# Boxplot of clicks
bp_clicks <- data_to_boxplot(data = clicks_df,
variable = sum_click,
add_outliers = FALSE,
fillColor = "#B71C1C",
color = "black")
highchart() %>%
hc_xAxis(type = "category",
title = list(text = "Clicks")) %>%
hc_yAxis(title = list(text = "Number of Clicks")) %>%
hc_title(
text = paste0("Statistical Summary of Clickstream Data without Outliers")
) %>%
hc_add_series_list(bp_clicks) %>%
hc_legend(FALSE)
# Boxplot of clicks
bp_clicks_outlier <- data_to_boxplot(data = clicks_df,
variable = sum_click,
add_outliers = TRUE,
fillColor = "#B71C1C",
color = "black")
highchart() %>%
hc_xAxis(type = "category",
title = list(text = "Clicks")) %>%
hc_yAxis(title = list(text = "Sum of Clicks")) %>%
hc_title(
text = paste0("Statistical Summary of Clickstream Data with Outliers")
) %>%
hc_add_series_list(bp_clicks_outlier) %>%
hc_legend(FALSE)
hchart(clicks_df$sum_click, color = "#B71C1C", name = "Clicks") %>%
hc_title(
text = paste0("Distribution of Clickstream Data")
) %>%
hc_xAxis(title = list(text = "Number of Clicks")) %>%
hc_yAxis(title = list(text = "Number of Students"))
#vle_df <- vle
# vle_df
vle %>% head()
# Merging the dataframes to link students with activities
# Long execution code
# Replace svle_df with student_vle
svle_vle_df <- data.table::merge.data.table(svle_df, vle, by = "id_site")
svle_vle_df
# Long execution code
# Number of Times student accessed an activity
activity_df <- svle_vle_df %>%
group_by(id_student,activity_type) %>%
summarise(activity_access_count = n()) %>%
as.data.frame()
activity_df
# Merging data frames
clicks_activity_df <- merge.data.table(activity_df, clicks_df, by = "id_student")
clicks_activity_df
activity_stats <- clicks_activity_df %>%
filter(engagement_level %in% 1) %>% # dashboard filter: single number select
group_by(engagement_level, activity_type) %>%
summarise(activity_access_count = n()) %>%
mutate(activity_access_percent = round(activity_access_count / sum(activity_access_count) * 100, 2)) %>%
arrange(desc(activity_access_percent))
activity_stats
hchart(activity_stats, "column", hcaes(x = activity_type, y = activity_access_percent),
dataLabels = list(enabled = TRUE, format = "{y}%"),
name = "% of Students") %>%
hc_title(
text = paste0("Percentage of Students that Access each VLE Activity in Engagement Level ", 1)
) %>%
hc_xAxis(title = list(text = "VLE Activity")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_exporting(
enabled = TRUE)
# Comparison between engagement levels
# Maximum number of comparison should be limited to 3 in dashboard select
activity_stats <- clicks_activity_df %>%
filter(engagement_level %in% c(1,2, 3)) %>%
group_by(engagement_level, activity_type) %>%
summarise(activity_access_count = n()) %>%
mutate(activity_access_percent = round(activity_access_count / sum(activity_access_count) * 100, 1)) %>%
arrange(desc(activity_access_percent))
hchart(activity_stats, "column", hcaes(x = activity_type, y = activity_access_percent, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}"),
stacking = "normal") %>%
hc_title(
text = paste0("Percentage of Students that Access each VLE Activity in Engagement Level")
) %>%
hc_xAxis(title = list(text = "VLE Activity")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
# Merging with student info data frame
# si <- read_csv("oulad/studentInfo.csv", show_col_types = FALSE)
# si$num_of_prev_attempts <- as.integer(si$num_of_prev_attempts)
# si <- as.data.frame(si)
clicks_student_df <- merge.data.table(student, clicks_df, by = "id_student") # si was student
clicks_student_df
module_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, code_module) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
module_stats
hchart(module_stats, "column", hcaes(x = code_module, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Modules Accessed by Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Module")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
clicks_df
gender_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, gender) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
gender_stats
hchart(gender_stats, "column", hcaes(x = gender, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Gender Representation in Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Gender")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
age_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, age_band) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
age_stats
hchart(age_stats, "column", hcaes(x = age_band, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Student Age Band Representation in Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Age Band")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
disability_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, disability) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
disability_stats$disability <- as.character(disability_stats$disability)
disability_stats
hchart(disability_stats, "column", hcaes(x = disability, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Student with/without a Disability Representation in Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Disability")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
final_results_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, final_result) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
final_results_stats
hchart(final_results_stats, "column", hcaes(x = final_result,
y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Student Final Academic Outcome in each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Final Result")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
prev_attempts_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, num_of_prev_attempts) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
prev_attempts_stats$num_of_prev_attempts <- as.character(prev_attempts_stats$num_of_prev_attempts)
prev_attempts_stats
hchart(prev_attempts_stats, "column", hcaes(x = num_of_prev_attempts,
y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Number of Previous Attempts in Course according to each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Number of Previous Attempts")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
region_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:2)) %>% # default: all
group_by(engagement_level, region) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
region_stats
hchart(region_stats, "column", hcaes(x = region, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Engagement Level Representation based on Student's Region of Stay")
) %>%
hc_xAxis(title = list(text = "Regions")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
shiny::runApp("readin_data_app/")
knitr::opts_chunk$set(
echo    = FALSE,
message = FALSE,
warning = FALSE,
fig.width=12)
library(tidyverse)
library(janitor)
library(readxl)
library(DT)
library(lubridate)
library(highcharter)
list[1]
list <- c(-25,269)
list[1]
list[2]
params$period
params$period
params$period[1]
params$period[2]
params$e_levels
params$year_semester
help.search("oulad::oulad")
help.search("oulad::oulad")
help.search("oulad")
knitr::opts_chunk$set(
echo    = FALSE,
message = FALSE,
warning = FALSE,
comment = NA,
fig.width=12)
library(tidyverse)
library(janitor)
library(readxl)
library(DT)
library(lubridate)
library(highcharter)
par(mfrow = c(1, 2))
hchart(clicks_df$sum_click, color = "#B71C1C", name = "Clicks") %>%
hc_title(
text = paste0("Distribution of Clickstream Data")
) %>%
hc_xAxis(title = list(text = "Number of Clicks")) %>%
hc_yAxis(title = list(text = "Number of Students"))
bp_clicks <- data_to_boxplot(data = clicks_df,
variable = sum_click,
add_outliers = FALSE,
fillColor = "#B71C1C",
color = "black")
highchart() %>%
hc_xAxis(type = "category",
title = list(text = "Clicks")) %>%
hc_yAxis(title = list(text = "Number of Clicks")) %>%
hc_title(
text = paste0("Statistical Summary of Clickstream Data without Outliers")
) %>%
hc_add_series_list(bp_clicks) %>%
hc_legend(FALSE)
plot_a
DT::datatable(engagement_level_probabilities,
rownames = F,
filter = "top",
extensions = 'Buttons',
caption = 'A data produced based on the GMM Model Results',
options = list(pageLength = 5, scrollX = TRUE,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print')),
class = 'cell-border stripe')
citation("mclust")
