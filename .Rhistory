group_by(engagement_level, code_module) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
module_stats
hchart(module_stats, "column", hcaes(x = code_module, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Modules Accessed by Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Module")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
clicks_df
gender_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, gender) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
gender_stats
hchart(gender_stats, "column", hcaes(x = gender, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Gender Representation in Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Gender")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
age_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, age_band) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
age_stats
hchart(age_stats, "column", hcaes(x = age_band, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Student Age Band Representation in Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Age Band")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
disability_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, disability) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
disability_stats$disability <- as.character(disability_stats$disability)
disability_stats
hchart(disability_stats, "column", hcaes(x = disability, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Student with/without a Disability Representation in Engagement Level(s):")
) %>%
hc_xAxis(title = list(text = "Disability")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
final_results_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, final_result) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
final_results_stats
hchart(final_results_stats, "column", hcaes(x = final_result,
y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Student Final Academic Outcome in each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Final Result")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
prev_attempts_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>% # default: all
group_by(engagement_level, num_of_prev_attempts) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
prev_attempts_stats$num_of_prev_attempts <- as.character(prev_attempts_stats$num_of_prev_attempts)
prev_attempts_stats
hchart(prev_attempts_stats, "column", hcaes(x = num_of_prev_attempts,
y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Number of Previous Attempts in Course according to each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Number of Previous Attempts")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
region_stats <- clicks_student_df %>%
filter(engagement_level %in% c(1:2)) %>% # default: all
group_by(engagement_level, region) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
region_stats
hchart(region_stats, "column", hcaes(x = region, y = percentage_of_students, group = engagement_level),
dataLabels = list(enabled = TRUE, format = "{y}%")) %>%
hc_title(
text = paste0("Engagement Level Representation based on Student's Region of Stay")
) %>%
hc_xAxis(title = list(text = "Regions")) %>%
hc_yAxis(title = list(text = "Percentage of Students"),
labels = list(format = "{value}%")) %>%
hc_legend(title = list(text = "Engagement Level")) %>%
hc_exporting(
enabled = TRUE)
shiny::runApp("readin_data_app/")
knitr::opts_chunk$set(
echo    = FALSE,
message = FALSE,
warning = FALSE,
fig.width=12)
library(tidyverse)
library(janitor)
library(readxl)
library(DT)
library(lubridate)
library(highcharter)
list[1]
list <- c(-25,269)
list[1]
list[2]
params$period
params$period
params$period[1]
params$period[2]
params$e_levels
params$year_semester
help.search("oulad::oulad")
help.search("oulad::oulad")
help.search("oulad")
knitr::opts_chunk$set(
echo    = FALSE,
message = FALSE,
warning = FALSE,
comment = NA,
fig.width=12)
library(tidyverse)
library(janitor)
library(readxl)
library(DT)
library(lubridate)
library(highcharter)
par(mfrow = c(1, 2))
hchart(clicks_df$sum_click, color = "#B71C1C", name = "Clicks") %>%
hc_title(
text = paste0("Distribution of Clickstream Data")
) %>%
hc_xAxis(title = list(text = "Number of Clicks")) %>%
hc_yAxis(title = list(text = "Number of Students"))
bp_clicks <- data_to_boxplot(data = clicks_df,
variable = sum_click,
add_outliers = FALSE,
fillColor = "#B71C1C",
color = "black")
highchart() %>%
hc_xAxis(type = "category",
title = list(text = "Clicks")) %>%
hc_yAxis(title = list(text = "Number of Clicks")) %>%
hc_title(
text = paste0("Statistical Summary of Clickstream Data without Outliers")
) %>%
hc_add_series_list(bp_clicks) %>%
hc_legend(FALSE)
plot_a
DT::datatable(engagement_level_probabilities,
rownames = F,
filter = "top",
extensions = 'Buttons',
caption = 'A data produced based on the GMM Model Results',
options = list(pageLength = 5, scrollX = TRUE,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print')),
class = 'cell-border stripe')
citation("mclust")
knitr::opts_chunk$set(
echo    = FALSE,
message = FALSE,
warning = FALSE,
comment = NA,
fig.width=12)
library(tidyverse)
library(janitor)
library(readxl)
library(DT)
library(lubridate)
library(highcharter)
params$year_semester %>% cat()
paste0("Number of days before the official course start: ",params$date_period[1]) %>% cat()
paste0("Number of days after the official course start: ",params$date_period[2]) %>% cat()
params$e_levels %>% cat()
svle_df <- read_csv("oulad/studentVle.csv", show_col_types = FALSE) %>% as.data.frame()
# Summing unique student clicks of the selected duration
clicks_df <- svle_df %>%
filter(date >= params$date_period[1] & date <= params$date_period[2] &
code_presentation %in% params$year_semester) %>%
group_by(id_student) %>%
summarise(sum_click = sum(sum_click))
# Extracting the clicks columns for modeling
gmm_df <- select(clicks_df, sum_click)
# Creating the Gaussian Mixture Model (GMM) with the selected engagement levels
gmm_model <- Mclust(gmm_df, G=params$e_levels, verbose = FALSE)
knitr::opts_chunk$set(
echo    = FALSE,
message = FALSE,
warning = FALSE,
comment = NA,
fig.width=12)
library(tidyverse)
library(janitor)
library(readxl)
library(DT)
library(lubridate)
library(highcharter)
params$year_semester %>% cat()
paste0("Number of days before the official course start: ",params$date_period[1]) %>% cat()
paste0("Number of days after the official course start: ",params$date_period[2]) %>% cat()
params$e_levels %>% cat()
svle_df <- read_csv("oulad/studentVle.csv", show_col_types = FALSE) %>% as.data.frame()
# Summing unique student clicks of the selected duration
clicks_df <- svle_df %>%
filter(date >= params$date_period[1] & date <= params$date_period[2] &
code_presentation %in% params$year_semester) %>%
group_by(id_student) %>%
summarise(sum_click = sum(sum_click))
# Extracting the clicks columns for modeling
gmm_df <- select(clicks_df, sum_click)
# Creating the Gaussian Mixture Model (GMM) with the selected engagement levels
gmm_model <- Mclust(gmm_df, G=params$e_levels, verbose = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Open University Learning Analytics Dataset
library(oulad)
# Data Analyis and Visualisation
library(tidyverse)
# Statistical Summary
library(tigerstats)
# Gaussian mixture model (GMM)
library(mclust)
# Interactive Data Visualization
library(highcharter)
# Fast Data operations: merging and manipulation
library(data.table)
knitr::opts_chunk$set(
echo    = FALSE,
message = FALSE,
warning = FALSE,
comment = NA,
fig.width=12)
library(tidyverse)
library(janitor)
library(readxl)
library(DT)
library(lubridate)
library(highcharter)
params$year_semester %>% cat()
paste0("Number of days before the official course start: ",params$date_period[1]) %>% cat()
paste0("Number of days after the official course start: ",params$date_period[2]) %>% cat()
params$e_levels %>% cat()
svle_df <- read_csv("oulad/studentVle.csv", show_col_types = FALSE) %>% as.data.frame()
# Summing unique student clicks of the selected duration
clicks_df <- svle_df %>%
filter(date >= params$date_period[1] & date <= params$date_period[2] &
code_presentation %in% params$year_semester) %>%
group_by(id_student) %>%
summarise(sum_click = sum(sum_click))
# Extracting the clicks columns for modeling
gmm_df <- select(clicks_df, sum_click)
# Creating the Gaussian Mixture Model (GMM) with the selected engagement levels
gmm_model <- Mclust(gmm_df, G=params$e_levels, verbose = FALSE)
# Adding the engagement level classification and uncertainty columns to the clicks data frame
clicks_df$engagement_level <- gmm_model$classification
clicks_df$uncertainty <- gmm_model$uncertainty
# Creating a data frame with the probabilities of students belonging to each cluster
engagement_level_probabilities <- gmm_model$z
colnames(engagement_level_probabilities) <- paste0('engagement_level', 1:gmm_model$G)
options(scipen=999)
engagement_level_probabilities <- engagement_level_probabilities %>%
round(2) %>%
as.data.frame()
# Adding engagement level, uncertainty, sum of clicks and student id to the GMM probability table
engagement_level_probabilities$engagement_level <- clicks_df$engagement_level
engagement_level_probabilities$uncertainty <- round(gmm_model$uncertainty*100,2)
engagement_level_probabilities$sum_click <- clicks_df$sum_click
engagement_level_probabilities$id_student <- clicks_df$id_student
# Creating a engagement level (cluster) mean table
engagement_level_avg_df <- as.data.frame(round(gmm_model$parameters$mean))
colnames(engagement_level_avg_df) <- "average_clicks"
# Rename rownames to engagement_level
engagement_level_avg_df <- cbind(engagement_level = rownames(engagement_level_avg_df), engagement_level_avg_df)
# Remove rownames
rownames(engagement_level_avg_df) <- NULL
# Creating an Engagement Level Count Table
# Obtain number of observations in each engagement level (cluster).
engagement_level_count_df <- clicks_df %>%
group_by(engagement_level) %>%
summarise(Number_of_students = n())
# Engagement Level Statistics Table containing engagement level count and mean (average clicks)
engagement_level_stats <- merge(engagement_level_avg_df, engagement_level_count_df) %>%
arrange(average_clicks)
hchart(engagement_level_probabilities$uncertainty, color = "#B71C1C", name = "GMM Uncertainty") %>%
hc_title(
text = paste0("Distribution of Engagement Level Assignment Uncertainty")
) %>%
hc_xAxis(title = list(text = "Uncertainty"),
labels = list(format = "{value}%")) %>%
hc_yAxis(title = list(text = "Number of Students"))
plot_a <- hchart(clicks_df$sum_click, color = "#B71C1C", name = "Clicks") %>%
hc_title(
text = paste0("Distribution of VLE Clicks")
) %>%
hc_xAxis(title = list(text = "Number of Clicks")) %>%
hc_yAxis(title = list(text = "Number of Students"))
bp_clicks <- data_to_boxplot(data = clicks_df,
variable = sum_click,
add_outliers = FALSE,
fillColor = "#B71C1C",
color = "black")
plot_b <- highchart() %>%
hc_xAxis(type = "category",
title = list(text = "Clicks")) %>%
hc_yAxis(title = list(text = "Number of Clicks")) %>%
hc_title(
text = paste0("Statistical Summary of VLE Clicks without Outliers")
) %>%
hc_add_series_list(bp_clicks) %>%
hc_legend(FALSE)
hw_grid(plot_a, plot_b)
plot_c <- hchart(engagement_level_stats, "column", hcaes(x = engagement_level, y = average_clicks),
dataLabels = list(enabled = TRUE),
name = "Average No. of Clicks") %>%
hc_title(
text = paste0("Average Number of Clicks for Each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Engagement Level")) %>%
hc_yAxis(title = list(text = "Average Number of Clicks")) %>%
hc_exporting(
enabled = TRUE)
plot_d <- hchart(engagement_level_stats, "column", hcaes(x = engagement_level, y = Number_of_students),
dataLabels = list(enabled = TRUE),
name = "No of Students") %>%
hc_title(
text = paste0("Number of Students in Each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Engagement Level")) %>%
hc_yAxis(title = list(text = "Number of Students")) %>%
hc_exporting(
enabled = TRUE)
hw_grid(plot_c, plot_d)
DT::datatable(engagement_level_probabilities,
rownames = F,
filter = "top",
extensions = 'Buttons',
caption = 'A data table produced based on the GMM Model Results',
options = list(pageLength = 5, scrollX = TRUE,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print')),
class = 'cell-border stripe')
clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>%
group_by(engagement_level, gender) %>%
summarise(number_of_students = n())
clicks_student_df %>%
filter(engagement_level %in% c(1:6)) %>%
group_by(engagement_level, gender) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
clicks_student_df %>%
filter(engagement_level %in% c(1:2)) %>%
group_by(engagement_level, gender) %>%
summarise(number_of_students = n()) %>%
mutate(percentage_of_students = round(number_of_students / sum(number_of_students) * 100, 1)) %>%
arrange(desc(percentage_of_students))
knitr::opts_chunk$set(
echo    = FALSE,
message = FALSE,
warning = FALSE,
comment = NA,
fig.width=12)
library(tidyverse)
library(mclust)
library(janitor)
library(readxl)
library(DT)
library(lubridate)
library(highcharter)
params$year_semester %>% cat()
paste0("Number of days before the official course start: ",params$date_period[1]) %>% cat()
paste0("Number of days after the official course start: ",params$date_period[2]) %>% cat()
params$e_levels %>% cat()
svle_df <- read_csv("oulad/studentVle.csv", show_col_types = FALSE) %>% as.data.frame()
# Summing unique student clicks of the selected duration
clicks_df <- svle_df %>%
filter(date >= params$date_period[1] & date <= params$date_period[2] &
code_presentation %in% params$year_semester) %>%
group_by(id_student) %>%
summarise(sum_click = sum(sum_click))
# Extracting the clicks columns for modeling
gmm_df <- select(clicks_df, sum_click)
# Creating the Gaussian Mixture Model (GMM) with the selected engagement levels
gmm_model <- Mclust(gmm_df, G=params$e_levels, verbose = FALSE)
# Adding the engagement level classification and uncertainty columns to the clicks data frame
clicks_df$engagement_level <- gmm_model$classification
clicks_df$uncertainty <- gmm_model$uncertainty
# Creating a data frame with the probabilities of students belonging to each cluster
engagement_level_probabilities <- gmm_model$z
colnames(engagement_level_probabilities) <- paste0('engagement_level', 1:gmm_model$G)
options(scipen=999)
engagement_level_probabilities <- engagement_level_probabilities %>%
round(2) %>%
as.data.frame()
# Adding engagement level, uncertainty, sum of clicks and student id to the GMM probability table
engagement_level_probabilities$engagement_level <- clicks_df$engagement_level
engagement_level_probabilities$uncertainty <- round(gmm_model$uncertainty*100,2)
engagement_level_probabilities$sum_click <- clicks_df$sum_click
engagement_level_probabilities$id_student <- clicks_df$id_student
# Creating a engagement level (cluster) mean table
engagement_level_avg_df <- as.data.frame(round(gmm_model$parameters$mean))
colnames(engagement_level_avg_df) <- "average_clicks"
# Rename rownames to engagement_level
engagement_level_avg_df <- cbind(engagement_level = rownames(engagement_level_avg_df), engagement_level_avg_df)
# Remove rownames
rownames(engagement_level_avg_df) <- NULL
# Creating an Engagement Level Count Table
# Obtain number of observations in each engagement level (cluster).
engagement_level_count_df <- clicks_df %>%
group_by(engagement_level) %>%
summarise(Number_of_students = n())
# Engagement Level Statistics Table containing engagement level count and mean (average clicks)
engagement_level_stats <- merge(engagement_level_avg_df, engagement_level_count_df) %>%
arrange(average_clicks)
hchart(engagement_level_probabilities$uncertainty, color = "#B71C1C", name = "GMM Uncertainty") %>%
hc_title(
text = paste0("Distribution of Engagement Level Assignment Uncertainty")
) %>%
hc_xAxis(title = list(text = "Uncertainty"),
labels = list(format = "{value}%")) %>%
hc_yAxis(title = list(text = "Number of Students"))
plot_a <- hchart(clicks_df$sum_click, color = "#B71C1C", name = "Clicks") %>%
hc_title(
text = paste0("Distribution of VLE Clicks")
) %>%
hc_xAxis(title = list(text = "Number of Clicks")) %>%
hc_yAxis(title = list(text = "Number of Students"))
bp_clicks <- data_to_boxplot(data = clicks_df,
variable = sum_click,
add_outliers = FALSE,
fillColor = "#B71C1C",
color = "black")
plot_b <- highchart() %>%
hc_xAxis(type = "category",
title = list(text = "Clicks")) %>%
hc_yAxis(title = list(text = "Number of Clicks")) %>%
hc_title(
text = paste0("Statistical Summary of VLE Clicks without Outliers")
) %>%
hc_add_series_list(bp_clicks) %>%
hc_legend(FALSE)
hw_grid(plot_a, plot_b)
plot_c <- hchart(engagement_level_stats, "column", hcaes(x = engagement_level, y = average_clicks),
dataLabels = list(enabled = TRUE),
name = "Average No. of Clicks") %>%
hc_title(
text = paste0("Average Number of Clicks for Each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Engagement Level")) %>%
hc_yAxis(title = list(text = "Average Number of Clicks")) %>%
hc_exporting(
enabled = TRUE)
plot_d <- hchart(engagement_level_stats, "column", hcaes(x = engagement_level, y = Number_of_students),
dataLabels = list(enabled = TRUE),
name = "No of Students") %>%
hc_title(
text = paste0("Number of Students in Each Engagement Level")
) %>%
hc_xAxis(title = list(text = "Engagement Level")) %>%
hc_yAxis(title = list(text = "Number of Students")) %>%
hc_exporting(
enabled = TRUE)
hw_grid(plot_c, plot_d)
DT::datatable(engagement_level_probabilities,
rownames = F,
filter = "top",
extensions = 'Buttons',
caption = 'A data table produced based on the GMM Model Results',
options = list(pageLength = 5, scrollX = TRUE,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel', 'pdf', 'print')),
class = 'cell-border stripe')
